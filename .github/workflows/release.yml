name: Release CS2 Plugin

on:
  workflow_dispatch:

env:
  PLUGIN_NAME: supercommands
  SOURCE_DIR: ./src
  INSTALL_PATH: /game/csgo/addons/swiftly/

jobs:
  generate-release:
    runs-on: ubuntu-latest
    environment: SWCS2
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag and set version
        id: get_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.9.9")
          echo "Latest tag: $LATEST_TAG"

          if [[ $LATEST_TAG == v* ]]; then
            VERSION=${LATEST_TAG#v}
          else
            VERSION="1.0.0"
          fi

          IFS='.' read -r major minor patch <<< "$VERSION"

          if [ "$patch" -ge 9 ]; then
            patch=0
            if [ "$minor" -ge 9 ]; then
              minor=0
              major=$((major+1))
            else
              minor=$((minor+1))
            fi
          else
            patch=$((patch+1))
          fi

          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Create ZIP file
        run: |
          cd ${{ env.SOURCE_DIR }}
          zip -r ../${{ env.PLUGIN_NAME }}-${{ env.NEW_VERSION }}.zip .

      - name: Get recent commit messages since last release
        id: get_commits
        run: |
          # Get the latest tag, or default to a very first commit if no tag exists
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "no_tag")

          # If no tag exists, use the first commit or empty commit messages
          if [[ "$LATEST_TAG" == "no_tag" ]]; then
            COMMIT_MESSAGES="- Initial Release"
          else
            # Get commit messages between latest tag and current commit
            COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --oneline | sed 's/^/- /')
          fi

          # Save commit messages to GITHUB_ENV and preserve the line breaks by escaping them
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: v${{ env.NEW_VERSION }}
          body: |
            **Changes:**
            ${{ env.COMMIT_MESSAGES }}

            **How to download ‚¨áÔ∏è**
            Click the file below named <code>${{ env.PLUGIN_NAME }}-${{ env.NEW_VERSION }}.zip</code> in the assets section to start the download automatically.

            **How to install üì¶**
            Extract the compressed file and place the folder(s) in `${{ env.INSTALL_PATH }}`

            **Support me ‚ù§Ô∏è**
            Please consider leaving a ‚≠ê if it's helpful to your server.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PLUGIN_NAME }}-${{ env.NEW_VERSION }}.zip
          asset_name: ${{ env.PLUGIN_NAME }}-${{ env.NEW_VERSION }}.zip
          asset_content_type: application/zip
